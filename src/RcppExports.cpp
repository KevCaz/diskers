// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// kernels
void kernels();
RcppExport SEXP _diskers_kernels() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    kernels();
    return R_NilValue;
END_RCPP
}
// kern_gaussian
NumericVector kern_gaussian(NumericVector dist, double scal);
RcppExport SEXP _diskers_kern_gaussian(SEXP distSEXP, SEXP scalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type scal(scalSEXP);
    rcpp_result_gen = Rcpp::wrap(kern_gaussian(dist, scal));
    return rcpp_result_gen;
END_RCPP
}
// kern_exponential
NumericVector kern_exponential(NumericVector dist, double scal);
RcppExport SEXP _diskers_kern_exponential(SEXP distSEXP, SEXP scalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type scal(scalSEXP);
    rcpp_result_gen = Rcpp::wrap(kern_exponential(dist, scal));
    return rcpp_result_gen;
END_RCPP
}
// kern_exponential_power
NumericVector kern_exponential_power(NumericVector dist, double scal, double shap);
RcppExport SEXP _diskers_kern_exponential_power(SEXP distSEXP, SEXP scalSEXP, SEXP shapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type scal(scalSEXP);
    Rcpp::traits::input_parameter< double >::type shap(shapSEXP);
    rcpp_result_gen = Rcpp::wrap(kern_exponential_power(dist, scal, shap));
    return rcpp_result_gen;
END_RCPP
}
// kern_2Dt
NumericVector kern_2Dt(NumericVector dist, double scal, double shap);
RcppExport SEXP _diskers_kern_2Dt(SEXP distSEXP, SEXP scalSEXP, SEXP shapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type scal(scalSEXP);
    Rcpp::traits::input_parameter< double >::type shap(shapSEXP);
    rcpp_result_gen = Rcpp::wrap(kern_2Dt(dist, scal, shap));
    return rcpp_result_gen;
END_RCPP
}
// kern_lognormal
NumericVector kern_lognormal(NumericVector dist, double scal, double shap);
RcppExport SEXP _diskers_kern_lognormal(SEXP distSEXP, SEXP scalSEXP, SEXP shapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type scal(scalSEXP);
    Rcpp::traits::input_parameter< double >::type shap(shapSEXP);
    rcpp_result_gen = Rcpp::wrap(kern_lognormal(dist, scal, shap));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_diskers_kernels", (DL_FUNC) &_diskers_kernels, 0},
    {"_diskers_kern_gaussian", (DL_FUNC) &_diskers_kern_gaussian, 2},
    {"_diskers_kern_exponential", (DL_FUNC) &_diskers_kern_exponential, 2},
    {"_diskers_kern_exponential_power", (DL_FUNC) &_diskers_kern_exponential_power, 3},
    {"_diskers_kern_2Dt", (DL_FUNC) &_diskers_kern_2Dt, 3},
    {"_diskers_kern_lognormal", (DL_FUNC) &_diskers_kern_lognormal, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_diskers(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
